/**
 * File:	include/debug/debug.ycp
 * Module:	Developpers functions
 * Summary:	Debugging functions
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 *
 * This file contains a debug function. It is able to display any value
 * in quite a readable form. It also allows you to save the input to the
 * file ($HOME/.yast2/DEBUGoutput.ycp).
 */

{

global define term any2tree(any value);
global define list any2items(any a);
global define list list2items(list l);
global define list map2items(map m);

/**
 * Create a tree from any value.
 * @param value value to be converted
 * @return tree widget created from the value
 */
global define term any2tree(any value) {
    string label = "&DEBUG output:";
    term tree = `Tree(`id(`tree), `opt(`hstretch, `vstretch),label);
    list items = any2items(value);
    tree = add(tree,items);
    return tree;
}

/**
 * Create an items list from any value.
 * @param a value to be converted
 * @return items for the tree widget
 */
global define list any2items(any a) {
    if(a == nil)
	return [ "NIL" ];
    else if(is(a,map))
	return map2items((map)a);
    else if(is(a,list))
	return list2items((list)a);
    else if(is(a,string))
	return [ sformat("\"%1\"",a) ];
    else
	return [ sformat("%1",a) ];
}

/**
 * Create an items list from a list.
 * @param l list to be converted
 * @return items for the tree widget
 */
global define list list2items(list l) {
    list ret = [];

    ret = maplist(`val, l, {
	string st = ""; //"+";
	list it = any2items(val);
	if(!is(val,map) && ! is(val,list)) {
	    st = (string) select(it,0,"");
	    it = [];
	}
	term te = `item(st,it);
        return te;
    });

    return ret;
}

/**
 * Create an items list from a map.
 * @param m map to be converted
 * @return items for the tree widget
 */
global define list map2items(map m) {
    list ret = [];

    ret = maplist(`key, `val, m, {
	list it = any2items(val);
	string st = (string) select(any2items(key),0,"");
	term te = `item(st,it);
	return te;
    });

    return ret;
}

/**
 * Show the given value in a nice way
 * @param value value to be displayed
 * @return true if success
 */
global define boolean DEBUG(any value) {

    UI::OpenDialog(`VBox(`Label("Processing the DEBUG value")));
    term res = any2tree(value);
    UI::CloseDialog();
    UI::OpenDialog(`opt(`defaultsize),`VBox(res,`HBox(
			`PushButton(`id(`ok),`opt(`default),"&OK"),
			`PushButton(`id(`save),"&Save")
    )));
    UI::SetFocus(`id(`tree));
    any ret = UI::UserInput();
    UI::CloseDialog();
    if(ret == `save) {
	UI::OpenDialog(`VBox(`Label("Saving the DEBUG value")));
	any home = SCR::Execute(.target.bash_output, "echo $HOME");
	any x = "";
	if(is(home,map)) {
	    home = lookup((map) home,"stdout",nil);
	    if(home!=nil) {
		home = lookup((map) home,"stdout","");
		home = splitstring((string) home," \n");
		home = select((list) home,0,"");
	        home = (string) home + "/.yast2";
		if(SCR::Read(.target.size,home)!=-1) {
		    home = (string) home + "/DEBUGoutput.ycp";
		    y2debug("home=%1",home);
		    string text = "";
		    boolean ret = SCR::Write(.target.ycp,home,value)==true;
		    if(ret == true)
			text = sformat("DEBUG output saved to: %1",home);
		    else
			text = sformat("Error saving file: %1",home);
		    //UI::CloseDialog();
		    UI::OpenDialog(`VBox(`Label(text),`PushButton("&OK")));
		    UI::UserInput();
		    UI::CloseDialog();
		    return ret;
		}
	    }
	}
	UI::CloseDialog();
	y2error("Invalid file: %1",home);
	return false;
    }

    return true;
};

/* testing stuff ... */

boolean test = false;
if(test) {

map testmap = $[
  "R" : $[
    "a" : "aa",
    "b" : "bb",
    `ahoj: "blah",
    "blah" : `ahoj
  ],
  "S" : $[
    "c" : "cc",
    "d" : [ 1, "2", "3", [ "3", 4 ], $[ "x" : 1, "y" : 2 ] ]
  ]
];

list testlist = [
    "a", 1, [ "a", 1 ], $[ "a": 1, `b : `c ]
];

//y2debug("db=%1",db);
//any db = SCR::Read(.target.ycp,"/home/msvec/cups/ppd_db_huge.ycp");
//any db = SCR::Read(.target.ycp,"/home/msvec/cups/ppd_db2.ycp");
//any db = SCR::Read(.target.ycp,"/var/lib/YaST2/ppd_db.ycp");

//any db = SCR::Read(.target.ycp,"/tmp/ppd/ppd_db.ycp");
//DEBUG(db);

//DEBUG(nil);
DEBUG(SCR::Read(.probe));

//DEBUG(testlist);
//DEBUG(testmap);

}

/* EOF */
}
